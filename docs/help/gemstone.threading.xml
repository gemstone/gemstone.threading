<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>gemstone.threading</name>
  </assembly>
  <members>
    <member name="T:gemstone.threading.ConcurrencyLimiter">
      <summary>
            Task scheduler that limits the number of tasks that can execute in parallel at any given time.
            </summary>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.ConcurrencyLimiter" /> class
            with a <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" /> and a maximum concurrency
            level equal to the number of processors on the current machine.
            </summary>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.#ctor(gemstone.threading.synchronizedoperations.SynchronizedOperationFactory)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.ConcurrencyLimiter" /> class with a
            maximum concurrency level equal to the number of processors on the current machine.
            </summary>
      <param name="synchronizedOperationFactory">Factory function for creating the synchronized operations to be used for processing tasks.</param>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.#ctor(gemstone.threading.synchronizedoperations.SynchronizedOperationFactory,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.ConcurrencyLimiter" /> class.
            </summary>
      <param name="synchronizedOperationFactory">Factory function for creating the synchronized operations to be used for processing tasks.</param>
      <param name="maximumConcurrencyLevel">The initial value for <see cref="P:gemstone.threading.ConcurrencyLimiter.MaximumConcurrencyLevel" />.</param>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.ConcurrencyLimiter" /> class
            with a <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" />.
            </summary>
      <param name="maximumConcurrencyLevel">The initial value for <see cref="P:gemstone.threading.ConcurrencyLimiter.MaximumConcurrencyLevel" />.</param>
    </member>
    <member name="P:gemstone.threading.ConcurrencyLimiter.CurrentConcurrencyLevel">
      <summary>
            Gets the number of threads that are currently executing tasks concurrently.
            </summary>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.GetScheduledTasks">
      <summary>
            For debugger support only, generates an enumerable of <see cref="T:System.Threading.Tasks.Task" />
            instances currently queued to the scheduler waiting to be executed.
            </summary>
      <returns>An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</returns>
    </member>
    <member name="P:gemstone.threading.ConcurrencyLimiter.MaximumConcurrencyLevel">
      <summary>
            Gets the maximum number of threads that can be executing tasks concurrently.
            </summary>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.QueueTask(System.Threading.Tasks.Task)">
      <summary>
            Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</param>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.SetMaximumConcurrencyLevel(System.Int32)">
      <summary>
            Sets the maximum number of threads that can be executing tasks concurrently.
            </summary>
      <param name="maximumConcurrencyLevel">The maximum concurrency level.</param>
    </member>
    <member name="M:gemstone.threading.ConcurrencyLimiter.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>
            Determines whether the provided <see cref="T:System.Threading.Tasks.Task" /> can be executed synchronously
            in this call, and if it can, executes it.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be executed.</param>
      <param name="taskWasPreviouslyQueued">
            A <see cref="T:System.Boolean" /> denoting whether or not task has previously been queued.
            If this parameter is True, then the task may have been previously queued (scheduled);
            if False, then the task is known not to have been queued,
            and this call is being made in order to execute the task inline without queuing it.
            </param>
      <returns>A <see cref="T:System.Boolean" /> value indicating whether the task was executed inline.</returns>
    </member>
    <member name="T:gemstone.threading.collections.PriorityQueue`1">
      <summary>
            Represents a thread-safe prioritized first in-first out (FIFO) collection.
            </summary>
      <typeparam name="T">The type of elements contained in the queue.</typeparam>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> class.
            </summary>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.#ctor(gemstone.threading.collections.PriorityQueue{`0})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> class.
            </summary>
      <param name="priorityQueue">Another priority queue of items to be enqueued in this queue at the same priority.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="priorityQueue" /> is null</exception>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> class.
            </summary>
      <param name="collection">A collection of items to be enqueued at the lowest priority.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null</exception>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> class.
            </summary>
      <param name="priorityLevels">The number of priority levels to preallocate in the queue.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priorityLevels" /> is less than or equal to 0</exception>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> elements to an existing
            one-dimensional <see cref="T:System.Array" />, starting at the specified array index.
            </summary>
      <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
            from the <see cref="T:gemstone.threading.collections.PriorityQueue`1" />. The <see cref="T:System.Array" /> must
            have zero-based indexing.
            </param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
            index is equal to or greater than the length of the array -or- The number of
            elements in the source <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> is greater
            than the available space from index to the end of the destination array.
            </exception>
    </member>
    <member name="P:gemstone.threading.collections.PriorityQueue`1.Count">
      <summary>
            Gets the number of items in the queue.
            </summary>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.Enqueue(`0,System.Int32)">
      <summary>
            Enqueues an item into the priority queue.
            </summary>
      <param name="item">The item to be enqueued.</param>
      <param name="priority">The priority at which the item should be queued. Larger numbers have higher priority!</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is negative</exception>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:gemstone.threading.collections.PriorityQueue`1" />.
            </summary>
      <returns>An enumerator for the contents of the <see cref="T:gemstone.threading.collections.PriorityQueue`1" />.</returns>
    </member>
    <member name="P:gemstone.threading.collections.PriorityQueue`1.IsEmpty">
      <summary>
            Indicates whether the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> is empty.
            </summary>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.ToArray">
      <summary>
            Copies the elements stored in the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> to a new array.
            </summary>
      <returns>A new array containing a snapshot of elements copied from the <see cref="T:gemstone.threading.collections.PriorityQueue`1" />.</returns>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.TryDequeue(System.Int32,`0@)">
      <summary>
            Dequeues an item from the priority queue.
            </summary>
      <param name="priority">The priority at which the item should be dequeued.</param>
      <param name="result">The item that was dequeued, or the default value if no item was dequeued.</param>
      <returns>True if an item was dequeued; false if the queue is empty.</returns>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.TryDequeue(`0@)">
      <summary>
            Dequeues an item from the priority queue.
            </summary>
      <param name="result">The item that was dequeued, or the default value if no item was dequeued.</param>
      <returns>True if an item was dequeued; false if the queue is empty.</returns>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.TryPeek(System.Int32,`0@)">
      <summary>
            Tries to return an object from the beginning of the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> without removing it.
            </summary>
      <param name="priority">The priority at which to peek into the queue.</param>
      <param name="result">
            When this method returns, result contains an object from the beginning of the
            <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> or an unspecified value if the operation failed.
            </param>
      <returns>true if an object was returned successfully; otherwise, false.</returns>
    </member>
    <member name="M:gemstone.threading.collections.PriorityQueue`1.TryPeek(`0@)">
      <summary>
            Tries to return an object from the beginning of the <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> without removing it.
            </summary>
      <param name="result">
            When this method returns, result contains an object from the beginning of the
            <see cref="T:gemstone.threading.collections.PriorityQueue`1" /> or an unspecified value if the operation failed.
            </param>
      <returns>true if an object was returned successfully; otherwise, false.</returns>
    </member>
    <member name="T:gemstone.threading.extensions.ActionExtensions">
      <summary>
            Defines extension methods for actions.
            </summary>
    </member>
    <member name="M:gemstone.threading.extensions.ActionExtensions.DelayAndExecute(System.Action,System.Int32,System.Action{System.Exception})">
      <summary>
            Execute an action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <returns>
            A function to call which will cancel the operation.
            Cancel function returns true if <paramref name="action" /> is cancelled in time, false if not.
            </returns>
    </member>
    <member name="M:gemstone.threading.extensions.ActionExtensions.DelayAndExecute(System.Action,System.Int32,System.Threading.CancellationToken,System.Action{System.Exception})">
      <summary>
            Execute an action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="cancellationToken">The token used to cancel execution.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:gemstone.threading.extensions.ActionExtensions.DelayAndExecute(System.Action{System.Threading.CancellationToken},System.Int32,System.Action{System.Exception})">
      <summary>
            Execute a cancellable action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <returns>
            A function to call which will cancel the operation.
            Cancel function returns true if <paramref name="action" /> is cancelled, false if not.
            </returns>
    </member>
    <member name="M:gemstone.threading.extensions.ActionExtensions.DelayAndExecute(System.Action{System.Threading.CancellationToken},System.Int32,System.Threading.CancellationToken,System.Action{System.Exception})">
      <summary>
            Execute a cancellable action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="cancellationToken">The token used to cancel execution.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="T:gemstone.threading.strands.PriorityStrand">
      <summary>
            Schedules tasks in a collection of FIFO queues and executes them in priority order.
            </summary>
    </member>
    <member name="M:gemstone.threading.strands.PriorityStrand.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.strands.PriorityStrand" /> class with a <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" />.
            </summary>
    </member>
    <member name="M:gemstone.threading.strands.PriorityStrand.#ctor(gemstone.threading.synchronizedoperations.SynchronizedOperationFactory)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.strands.PriorityStrand" /> class.
            </summary>
      <param name="synchronizedOperationFactory">Factory function for creating the synchronized operation to be used for processing tasks.</param>
    </member>
    <member name="M:gemstone.threading.strands.PriorityStrand.#ctor(gemstone.threading.synchronizedoperations.SynchronizedOperationFactory,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.strands.PriorityStrand" /> class.
            </summary>
      <param name="synchronizedOperationFactory">Factory function for creating the synchronized operation to be used for processing tasks.</param>
      <param name="priorityLevels">The number of priority levels to be preallocated by the priority queue.</param>
    </member>
    <member name="M:gemstone.threading.strands.PriorityStrand.#ctor(System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.strands.PriorityStrand" /> class with a <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" />.
            </summary>
      <param name="priorityLevels">The number of priority levels to be preallocated by the priority queue.</param>
    </member>
    <member name="M:gemstone.threading.strands.PriorityStrand.GetScheduler(System.Int32)">
      <summary>
            Gets a <see cref="T:System.Threading.Tasks.TaskScheduler" /> used to queue tasks at a specific priority.
            </summary>
      <param name="priority">The priority at which tasks should be queued by the returned <see cref="T:System.Threading.Tasks.TaskScheduler" />. Higher numbers are higher in priority!</param>
      <returns>A <see cref="T:System.Threading.Tasks.TaskScheduler" /> that queues tasks into the strand at the given priority.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is less than zero</exception>
    </member>
    <member name="T:gemstone.threading.strands.Strand">
      <summary>
            Schedules tasks in a FIFO queue and executes them in a synchronized asynchronous loop.
            </summary>
    </member>
    <member name="M:gemstone.threading.strands.Strand.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.strands.Strand" /> class with a <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" />.
            </summary>
    </member>
    <member name="M:gemstone.threading.strands.Strand.#ctor(gemstone.threading.synchronizedoperations.SynchronizedOperationFactory)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.strands.Strand" /> class.
            </summary>
      <param name="synchronizedOperationFactory">Factory function for creating the synchronized operation to be used for processing tasks.</param>
    </member>
    <member name="M:gemstone.threading.strands.Strand.GetScheduledTasks">
      <summary>
            For debugger support only, generates an enumerable of <see cref="T:System.Threading.Tasks.Task" />
            instances currently queued to the scheduler waiting to be executed.
            </summary>
      <returns>An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</returns>
    </member>
    <member name="P:gemstone.threading.strands.Strand.MaximumConcurrencyLevel">
      <summary>
            Indicates the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler" /> is able to support.
            </summary>
    </member>
    <member name="M:gemstone.threading.strands.Strand.QueueTask(System.Threading.Tasks.Task)">
      <summary>
            Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</param>
    </member>
    <member name="M:gemstone.threading.strands.Strand.TryDequeue(System.Threading.Tasks.Task)">
      <summary>
            Attempts to dequeue a <see cref="T:System.Threading.Tasks.Task" /> that was previously queued to this scheduler.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be dequeued.</param>
      <returns>A Boolean denoting whether the task argument was successfully dequeued.</returns>
    </member>
    <member name="M:gemstone.threading.strands.Strand.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>
            Attempts to executes a task inline, but only if this method is
            called on the processing thread to avoid parallel execution of tasks.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be executed.</param>
      <param name="taskWasPreviouslyQueued">
            A Boolean denoting whether or not task has previously been queued.
            If this parameter is True, then the task may have been previously queued (scheduled);
            if False, then the task is known not to have been queued,
            and this call is being made in order to execute the task inline without queuing it.
            </param>
      <returns>A Boolean value indicating whether the task was executed inline.</returns>
    </member>
    <member name="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation">
      <summary>
            Represents a short-running synchronized operation that cannot run while it is already
            in progress. Async operations will execute on the thread-pool after the specified
            <see cref="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay" /> in milliseconds.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="F:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.DefaultDelay">
      <summary>
            Defines the default value for the <see cref="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay" /> property.
            </summary>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay">
      <summary>
            Gets or sets the amount of time to wait before execution, in milliseconds,
            for any asynchronous calls. Zero value will execute immediately.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.ExecuteActionAsync">
      <summary>
            Executes the action on a separate thread after the specified <see cref="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay" />.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Factory(System.Action)">
      <summary>
            Factory method to match the <see cref="T:gemstone.threading.synchronizedoperations.SynchronizedOperationFactory" /> signature.
            </summary>
      <param name="action">The action to be performed by the <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" />.</param>
      <returns>A new instance of <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" /> with <see cref="F:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.DefaultDelay" /> of 1000 milliseconds.</returns>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Run(System.Boolean)">
      <summary>
            Executes the action on another thread after the specified <see cref="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay" /> in milliseconds or marks
            the operation as pending if the operation is already running. Method same as <see cref="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.RunAsync" /> for
            <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" />.
            </summary>
      <param name="runPendingSynchronously">
            Defines synchronization mode for running any pending operation; must be <c>false</c> for
            <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" />.
            </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="runPendingSynchronously" /> must be <c>false</c> for <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" />.
            </exception>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.RunAsync">
      <summary>
            Executes the action on another thread after the specified <see cref="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay" /> in milliseconds or marks
            the operation as pending if the operation is already running
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.TryRun(System.Boolean)">
      <summary>
            Attempts to execute the action on another thread after the specified <see cref="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay" /> in milliseconds.
            Does nothing if the operation is already running. Method same as <see cref="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.TryRunAsync" /> for
            <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" />.
            </summary>
      <param name="runPendingSynchronously">
            Defines synchronization mode for running any pending operation; must be <c>false</c> for
            <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" />.
            </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="runPendingSynchronously" /> must be <c>false</c> for <see cref="T:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation" />.
            </exception>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.TryRunAsync">
      <summary>
            Attempts to execute the action on another thread after the specified <see cref="P:gemstone.threading.synchronizedoperations.DelayedSynchronizedOperation.Delay" /> in milliseconds.
            Does nothing if the operation is already running.
            </summary>
    </member>
    <member name="T:gemstone.threading.synchronizedoperations.ISynchronizedOperation">
      <summary>
            Represents an operation that cannot run while it is already in progress.
            </summary>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.ISynchronizedOperation.CancellationToken">
      <summary>
            Gets or sets <see cref="T:System.Threading.CancellationToken" /> to use for cancelling actions.
            </summary>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.ISynchronizedOperation.IsPending">
      <summary>
            Gets flag indicating if the synchronized operation has an additional operation that is pending
            execution after the currently running action has completed.
            </summary>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.ISynchronizedOperation.IsRunning">
      <summary>
            Gets flag indicating if the synchronized operation is currently executing its action.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ISynchronizedOperation.Run(System.Boolean)">
      <summary>
            Executes the action on current thread or marks the operation as pending if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ISynchronizedOperation.RunAsync">
      <summary>
            Executes the action on another thread or marks the operation as pending if the operation is already running.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ISynchronizedOperation.TryRun(System.Boolean)">
      <summary>
            Attempts to execute the action on current thread. Does nothing if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ISynchronizedOperation.TryRunAsync">
      <summary>
            Attempts to execute the action on another thread. Does nothing if the operation is already running.
            </summary>
    </member>
    <member name="T:gemstone.threading.synchronizedoperations.LongSynchronizedOperation">
      <summary>
            Represents a long-running synchronized operation
            that cannot run while it is already in progress.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.LongSynchronizedOperation.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.LongSynchronizedOperation.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.LongSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.LongSynchronizedOperation.#ctor(System.Action{System.Threading.CancellationToken},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.LongSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The cancellable action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.LongSynchronizedOperation.ExecuteActionAsync">
      <summary>
            Executes the action on a separate thread.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.LongSynchronizedOperation.Factory(System.Action)">
      <summary>
            Factory method to match the <see cref="T:gemstone.threading.synchronizedoperations.SynchronizedOperationFactory" /> signature.
            </summary>
      <param name="action">The action to be performed by the <see cref="T:gemstone.threading.synchronizedoperations.LongSynchronizedOperation" />.</param>
      <returns>A new instance of <see cref="T:gemstone.threading.synchronizedoperations.LongSynchronizedOperation" />.</returns>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.LongSynchronizedOperation.IsBackground">
      <summary>
            Gets or sets whether or not the thread executing the action is a background thread.
            </summary>
    </member>
    <member name="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation">
      <summary>
            Represents a short-running synchronized operation
            that cannot run while it is already in progress.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation.ExecuteActionAsync">
      <summary>
            Executes the action in an asynchronous loop on
            the thread pool, as long as the operation is pending.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation.Factory(System.Action)">
      <summary>
            Factory method to match the <see cref="T:gemstone.threading.synchronizedoperations.SynchronizedOperationFactory" /> signature.
            </summary>
      <param name="action">The action to be performed by the <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" />.</param>
      <returns>A new instance of <see cref="T:gemstone.threading.synchronizedoperations.ShortSynchronizedOperation" />.</returns>
    </member>
    <member name="T:gemstone.threading.synchronizedoperations.SynchronizedOperationBase">
      <summary>
            Base class for operations that cannot run while they is already in progress.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.#ctor(System.Action)">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.#ctor(System.Action,System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.#ctor(System.Action{System.Threading.CancellationToken})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.#ctor(System.Action{System.Threading.CancellationToken},System.Action{System.Exception})">
      <summary>
            Creates a new instance of the <see cref="T:gemstone.threading.synchronizedoperations.SynchronizedOperationBase" /> class.
            </summary>
      <param name="action">The cancellable action to be performed during this operation.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.CancellationToken">
      <summary>
            Gets or sets <see cref="T:System.Threading.CancellationToken" /> to use for cancelling actions.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.ExecuteAction">
      <summary>
            Executes the action once on the current thread.
            </summary>
      <returns>
        <c>true</c> if the action was pending and needs to run again; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.ExecuteActionAsync">
      <summary>
             Executes the action on a separate thread.
             </summary>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.IsPending">
      <summary>
            Gets flag indicating if the synchronized operation has an additional operation that is pending
            execution after the currently running action has completed.
            </summary>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.IsRunning">
      <summary>
            Gets flag indicating if the synchronized operation is currently executing its action.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.ProcessException(System.Exception)">
      <summary>
            Processes an exception thrown by an operation.
            </summary>
      <param name="ex">
        <see cref="T:System.Exception" /> to be processed.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.Run(System.Boolean)">
      <summary>
            Executes the action on current thread or marks the operation as pending if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.RunAsync">
      <summary>
            Executes the action on another thread or marks the operation as pending if the operation is already running.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.TryRun(System.Boolean)">
      <summary>
            Attempts to execute the action on current thread. Does nothing if the operation is already running.
            </summary>
      <param name="runPendingSynchronously">Defines synchronization mode for running any pending operation.</param>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.TryRunAsync">
      <summary>
            Attempts to execute the action on another thread. Does nothing if the operation is already running.
            </summary>
    </member>
    <member name="E:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.UnhandledException">
      <summary>
            Exposes exceptions that were suppressed but otherwise unhandled by a synchronized operation.
            </summary>
    </member>
    <member name="T:gemstone.threading.synchronizedoperations.SynchronizedOperationFactory">
      <summary>
            Factory method for creating synchronized operations.
            </summary>
      <param name="action">The action to be synchronized by the operation.</param>
      <returns>The operation that synchronizes the given action.</returns>
    </member>
    <member name="T:gemstone.threading.synchronizedoperations.UnhandledExceptionEventArgs">
      <summary>
            Event arguments for the <see cref="E:gemstone.threading.synchronizedoperations.SynchronizedOperationBase.UnhandledException" /> event.
            </summary>
    </member>
    <member name="M:gemstone.threading.synchronizedoperations.UnhandledExceptionEventArgs.#ctor(System.Exception)">
      <summary>
            Creates a new <see cref="T:gemstone.threading.synchronizedoperations.UnhandledExceptionEventArgs" /> instance.
            </summary>
      <param name="ex"></param>
    </member>
    <member name="P:gemstone.threading.synchronizedoperations.UnhandledExceptionEventArgs.UnhandledException">
      <summary>
            Gets the <see cref="T:System.Exception" /> that was unhandled.
            </summary>
    </member>
  </members>
</doc>